import smtplib
from email.mime.text import MIMEText
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
TOKEN = "6702141092:AAFfXtlkW4U8fPT3VnBJMZToHP4GKjpwc2c"

# SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
smtp_server = 'smtp.gmail.com'
smtp_port = 587
smtp_user = 'Makarkoh53@gmail.com'
smtp_password = '09)09)09)'

# –ö–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
button_email = KeyboardButton('üìß Email —Å–Ω–æ—Å')
button_support = KeyboardButton('üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞')

keyboard = ReplyKeyboardMarkup([[button_email, button_support]], resize_keyboard=True)

# –°–ø–∏—Å–æ–∫ –ø–æ—á—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±
recipients = [
    "abuse@telegram.org",
    "DMCA@telegram.org",
    "support@telegram.org",
    "Ceo@telegram.org",
    "Recover@telegram.org",
    "Spam@telegram.org"
]

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

async def email_snos(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_data[user_id] = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∂–∞–ª–æ–±—ã:")

async def process_complaint(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id

    if 'subject' not in user_data[user_id]:
        user_data[user_id]['subject'] = update.message.text
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã:")
    elif 'body' not in user_data[user_id]:
        user_data[user_id]['body'] = update.message.text
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?")
    elif 'num_requests' not in user_data[user_id]:
        try:
            num_requests = int(update.message.text)
            user_data[user_id]['num_requests'] = num_requests
            await update.message.reply_text(f"–û—Ç–ø—Ä–∞–≤–ª—è—é {num_requests} –∑–∞–ø—Ä–æ—Å–æ–≤...")
            await send_complaint(
                user_data[user_id]['subject'],
                user_data[user_id]['body'],
                num_requests,
                update.message
            )
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤.")

async def support(update: Update, context: CallbackContext):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –∞–¥–º–∏–Ω –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç")

async def send_complaint(subject, body, num_requests, message):
    try:
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(smtp_user, smtp_password)

        for _ in range(num_requests):
            for recipient in recipients:
                msg = MIMEText(body)
                msg['Subject'] = subject
                msg['From'] = smtp_user
                msg['To'] = recipient
                server.sendmail(smtp_user, recipient, msg.as_string())

        server.quit()
        await message.reply_text("–ñ–∞–ª–æ–±—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    except Exception as e:
        await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±: {e}")

def main():
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex('üìß Email —Å–Ω–æ—Å'), email_snos))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_complaint))
    application.add_handler(MessageHandler(filters.Regex('üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞'), support))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
